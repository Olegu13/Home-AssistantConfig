substitutions:
  devicename: nodemcu2
  friendly_name: Nodemcu 2
  update_interval_short: 2min
  update_interval_long: 10min
  room: Wohnzimmer
esphome:
  name: ${devicename}
  platform: ESP8266
  board: nodemcuv2
time: !include shared/time.yaml
wifi: !include shared/wifi.yaml
api: !include shared/api.yaml
ota: !include shared/ota.yaml
web_server: !include shared/webserver.yaml
globals: !include shared/globals.yaml
captive_portal:
logger:
i2c:
  sda: D6
  scl: D7
  scan: true
#apds9960:
#  address: 0x39
#  update_interval: 60s
sun:
  latitude: !secret home_lat
  longitude: !secret home_lon
sensor:
  - platform: bme280
    update_interval: ${update_interval_long}
    temperature:
      name: ${friendly_name} (${room}) Temperatur
      id: bme280_temperature
      unit_of_measurement: "°C"
      icon: "mdi:thermometer-lines"
    pressure:
      name: ${friendly_name} (${room}) Absoluter Luftdruck
      id: bme280_pressure
      unit_of_measurement: hPa
      icon: mdi:gauge
    humidity:
      name: ${friendly_name} (${room}) Relative Luftfeuchtigkeit
      id: bme280_humidity
      unit_of_measurement: "%"
      icon: "mdi:water-percent"
    address: 0x77
  - platform: bh1750
    name: ${friendly_name} (${room}) Lichtsensor
    address: 0x23
    unit_of_measurement: lx
  - platform: ccs811
    eco2:
      id: eco2
      name: ${friendly_name} (${room}) eCO2 Wert
      unit_of_measurement: ppm
      filters:
        - filter_out: 65021
    tvoc:
      id: tvoc
      name: ${friendly_name} (${room}) tVOC Wert
      unit_of_measurement: ppb
      filters:
        - filter_out: 65021
    address: 0x5A
    update_interval: ${update_interval_short}
    baseline: 0x8477
    temperature: bme280_temperature
    humidity: bme280_humidity
  - platform: sun
    name: ${friendly_name} (${room}) Sonne Elevation
    type: elevation
    update_interval: ${update_interval_long}
  - platform: sun
    name: ${friendly_name} (${room}) Sonne Azimuth
    type: azimuth
    update_interval: ${update_interval_long}
  - platform: adc
    pin: A0
    update_interval: ${update_interval_short}
    name: ${friendly_name} (${room}) Audio Meter
    filters:
      - multiply: 3.3
    unit_of_measurement: dB
  - platform: uptime
    force_update: true
    id: ${devicename}_uptime
    internal: true
    update_interval: ${update_interval_long}
  - platform: template
    name: ${friendly_name} (${room}) Höhe NHN
    unit_of_measurement: m
    lambda: |-
      const float STANDARD_SEA_LEVEL_PRESSURE = 1013.25; //in hPa, see note
      return ((id(bme280_temperature).state + 273.15) / 0.0065) *
        (powf((STANDARD_SEA_LEVEL_PRESSURE / id(bme280_pressure).state), 0.190234) - 1); // in meter
    update_interval: ${update_interval_long}
  - platform: template
    name: ${friendly_name} (${room}) Absolute Luftfeuchtigkeit
    lambda: |-
      const float mw = 18.01534;    // molar mass of water g/mol
      const float r = 8.31447215;   // Universal gas constant J/mol/K
      return (6.112 * powf(2.718281828, (17.67 * id(bme280_temperature).state) /
        (id(bme280_temperature).state + 243.5)) * id(bme280_humidity).state * mw) /
        ((273.15 + id(bme280_temperature).state) * r); // in grams/m^3
    unit_of_measurement: "g/m³"
    accuracy_decimals: 2
    update_interval: ${update_interval_long}
text_sensor:
  - platform: template
    update_interval: ${update_interval_short}
    name: ${friendly_name} (${room}) IAQ
    icon: "mdi:air-filter"
    lambda: |-
      id(iaq_index) = 0;
      //*
      //* Transform indoor humidity values to IAQ points according to Indoor Air Quality UK: 
      // * http://www.iaquk.org.uk/
      //*/
      if (id(bme280_humidity).state < 10 or id(bme280_humidity).state > 90) {
        id(iaq_index) += 1;
      }
      else if (id(bme280_humidity).state < 20 or id(bme280_humidity).state > 80) {
        id(iaq_index) += 2;
      }
      else if (id(bme280_humidity).state < 30 or id(bme280_humidity).state > 70) {
        id(iaq_index) += 3;
      }
      else if (id(bme280_humidity).state < 40 or id(bme280_humidity).state > 60) {
        id(iaq_index) += 4;
      }
      else if (id(bme280_humidity).state >= 40 and id(bme280_humidity).state <= 60) {
        id(iaq_index) += 5;
      }
      /*
       * Transform eCO2 values to IAQ points according to Indoor Air Quality UK: 
       * http://www.iaquk.org.uk/
       */
      if (id(eco2).state <= 600) {
        id(iaq_index) += 5;
      }
      else if (id(eco2).state <= 800) {
        id(iaq_index) += 4;
      }
      else if (id(eco2).state <= 1500) {
        id(iaq_index) += 3;
      }
      else if (id(eco2).state <= 1800) {
        id(iaq_index) += 2;
      }
      else if (id(eco2).state > 1800) {
        id(iaq_index) += 1;
      }
      /*
       * Transform IAQ index to human readable text according to Indoor Air Quality UK: 
       * http://www.iaquk.org.uk/
       */
      ESP_LOGD("main", "Current IAQ index %d", id(iaq_index));
      if (id(iaq_index) <= 6) {
        return {"Unhealty"};
      }
      else if (id(iaq_index) <= 9) {
        return {"Poor"};
      }
      else if (id(iaq_index) <= 12) {
        return {"Moderate"};
      }
      else if (id(iaq_index) <= 14) {
        return {"Good"};
      }
      else if (id(iaq_index) > 14) {
        return {"Excellent"};
      }
      return {};
  - platform: template
    update_interval: ${update_interval_short}
    icon: "mdi:chemical-weapon"
    name: ${friendly_name} (${room}) IAQ Index
    lambda: |-
      id(iaq_index) = 0;
      if (id(bme280_humidity).state < 10 or id(bme280_humidity).state > 90) {
        id(iaq_index) += 1;
      }
      else if (id(bme280_humidity).state < 20 or id(bme280_humidity).state > 80) {
        id(iaq_index) += 2;
      }
      else if (id(bme280_humidity).state < 30 or id(bme280_humidity).state > 70) {
        id(iaq_index) += 3;
      }
      else if (id(bme280_humidity).state < 40 or id(bme280_humidity).state > 60) {
        id(iaq_index) += 4;
      }
      else if (id(bme280_humidity).state >= 40 and id(bme280_humidity).state <= 60) {
        id(iaq_index) += 5;
      }
      if (id(eco2).state <= 600) {
        id(iaq_index) += 5;
      }
      else if (id(eco2).state <= 800) {
        id(iaq_index) += 4;
      }
      else if (id(eco2).state <= 1500) {
        id(iaq_index) += 3;
      }
      else if (id(eco2).state <= 1800) {
        id(iaq_index) += 2;
      }
      else if (id(eco2).state > 1800) {
        id(iaq_index) += 1;
      }
      if (id(iaq_index) == 1) {
        return {"10"};
      }
      else if (id(iaq_index) == 2) {
        return {"20"};
      }
      else if (id(iaq_index) == 3) {
        return {"30"};
      }
      else if (id(iaq_index) == 4) {
        return {"40"};
      }
      else if (id(iaq_index) == 5) {
        return {"50"};
      }
      else if (id(iaq_index) == 6) {
        return {"60"};
      }
      else if (id(iaq_index) == 7) {
        return {"70"};
      }
      else if (id(iaq_index) == 8) {
        return {"80"};
      }
      else if (id(iaq_index) == 9) {
        return {"90"};
      }
      else if (id(iaq_index) == 10) {
        return {"100"};
      }
      else if (id(iaq_index) == 11) {
        return {"110"};
      }
      else if (id(iaq_index) == 12) {
        return {"120"};
      }
      else if (id(iaq_index) == 13) {
        return {"130"};
      }
      else if (id(iaq_index) == 14) {
        return {"140"};
      }
      else if (id(iaq_index) > 14) {
        return {"150"};
      }
      return {};
  - platform: version
    name: ${friendly_name} (${room}) Version
    icon: "mdi:car-esp"
    on_value:
      then:
        - lambda: |-
            ESP_LOGD("main", "The current version is %s", x.c_str());
  - platform: wifi_info
    ip_address:
      name: ${friendly_name} (${room}) IP Address
      icon: mdi:wifi
    ssid:
      name: ${friendly_name} (${room}) SSID
      icon: mdi:wifi
    bssid:
      name: ${friendly_name} (${room}) BSSID
      icon: mdi:wifi
  - platform: template
    name: ${friendly_name} (${room}) Uptime
    lambda: |-
      uint32_t dur = id(${devicename}_uptime).state;
      int dys = 0;
      int hrs = 0;
      int mnts = 0;
      if (dur > 86399) {
        dys = trunc(dur / 86400);
        dur = dur - (dys * 86400);
      }
      if (dur > 3599) {
        hrs = trunc(dur / 3600);
        dur = dur - (hrs * 3600);
      }
      if (dur > 59) {
        mnts = trunc(dur / 60);
        dur = dur - (mnts * 60);
      }
      char buffer[17];
      sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    icon: mdi:clock-start
    update_interval: ${update_interval_long}
#  - platform: apds9960
#    type: CLEAR
#    name: ${friendly_name} (${room}) CLEAR
#  - platform: apds9960
#    type: RED
#    name: ${friendly_name} (${room}) RED
#  - platform: apds9960
#    type: GREEN
#    name: ${friendly_name} (${room}) GREEN
#  - platform: apds9960
#    type: BLUE
#    name: ${friendly_name} (${room}) BLUE
#  - platform: apds9960
#    type: PROXIMITY
#    name: ${friendly_name} (${room}) PROXIMITY

binary_sensor:
  - platform: gpio
    pin: D3
    device_class: sound
    name: ${friendly_name} (${room}) Noise Sensor
    filters:
      - delayed_off: 120s
  #    on_state:
  #      then:
  #        - script.execute: mario
  #  - platform: apds9960
  #    direction: UP
  #    name: ${friendly_name} (${room}) UP
  #  - platform: apds9960
  #    direction: DOWN
  #    name: ${friendly_name} (${room}) DOWN
  #  - platform: apds9960
  #    direction: LEFT
  #    name: ${friendly_name} (${room}) LEFT
  #  - platform: apds9960
  #    direction: RIGHT
  #    name: ${friendly_name} (${room}) RIGHT
  #  - platform: status
  #    device_class: connectivity
  #    name: ${friendly_name} (${room}) Status
  - platform: gpio
    pin: D2
    device_class: motion
    name: ${friendly_name} (${room}) Doppler Sensor
    id: ${devicename}_doppler
    filters:
      - delayed_off: 2min
      - delayed_on: 200ms
  - platform: template
    id: ${devicename}_templ_doppler
    internal: true
    lambda: "return id(${devicename}_doppler).state;"
    filters:
      - delayed_off: 3min
#output:
#  - platform: esp8266_pwm
#    pin: D5
#    id: buzzer
#script:
#  - id: beep
#    then:
#      - output.esp8266_pwm.set_frequency:
#          id: buzzer
#          frequency: 900
#      - output.set_level:
#          id: buzzer
#          level: 30%
#      - delay: 90ms
#      - output.turn_off: buzzer
#  - id: imperial
#    then:
#        - output.esp8266_pwm.set_frequency:
#            id: buzzer
#            frequency: 440
#        - output.set_level:
#            id: buzzer
#            level: 50%
#        - delay: 500ms
#        - output.turn_off: buzzer
#        - delay: 20ms
#        - output.esp8266_pwm.set_frequency:
#            id: buzzer
#            frequency: 440
#        - output.set_level:
#            id: buzzer
#            level: 50%
#        - delay: 500ms
#        - output.turn_off: buzzer
#        - delay: 20ms
#        - output.esp8266_pwm.set_frequency:
#            id: buzzer
#            frequency: 440
#        - output.set_level:
#            id: buzzer
#            level: 50%
#        - delay: 500ms
#        - output.turn_off: buzzer
#        - delay: 20ms
#        - output.esp8266_pwm.set_frequency:
#            id: buzzer
#            frequency: 349
#        - output.set_level:
#            id: buzzer
#            level: 50%
#        - delay: 350ms
#        - output.turn_off: buzzer
#        - delay: 20ms
#        - output.esp8266_pwm.set_frequency:
#            id: buzzer
#            frequency: 523
#        - output.set_level:
#            id: buzzer
#            level: 50%
#        - delay: 150ms
#        - output.turn_off: buzzer
#        - delay: 20ms
#        - output.esp8266_pwm.set_frequency:
#            id: buzzer
#            frequency: 440
#        - output.set_level:
#            id: buzzer
#            level: 50%
#        - delay: 500ms
#        - output.turn_off: buzzer
#        - delay: 20ms
#        - output.esp8266_pwm.set_frequency:
#            id: buzzer
#            frequency: 349
#        - output.set_level:
#            id: buzzer
#            level: 50%
#        - delay: 350ms
#        - output.turn_off: buzzer
#        - delay: 20ms
#        - output.esp8266_pwm.set_frequency:
#            id: buzzer
#            frequency: 523
#        - output.set_level:
#            id: buzzer
#            level: 50%
#        - delay: 150ms
#        - output.turn_off: buzzer
#        - delay: 20ms
#        - output.esp8266_pwm.set_frequency:
#            id: buzzer
#            frequency: 440
#        - output.set_level:
#            id: buzzer
#            level: 50%
#        - delay: 650ms
#        - output.turn_off: buzzer
#  - id: mario
#    then:
#        - output.esp8266_pwm.set_frequency:
#            id: buzzer
#            frequency: 660
#        - output.set_level:
#            id: buzzer
#            level: 50%
#        - delay: 100ms
#        - output.turn_off: buzzer
#        - delay: 150ms
#        - output.esp8266_pwm.set_frequency:
#            id: buzzer
#            frequency: 660
#        - output.set_level:
#            id: buzzer
#            level: 50%
#        - delay: 100ms
#        - output.turn_off: buzzer
#        - delay: 300ms
#        - output.esp8266_pwm.set_frequency:
#            id: buzzer
#            frequency: 660
#        - output.set_level:
#            id: buzzer
#            level: 50%
#        - delay: 100ms
#        - output.turn_off: buzzer
#        - delay: 300ms
#        - output.esp8266_pwm.set_frequency:
#            id: buzzer
#            frequency: 510
#        - output.set_level:
#            id: buzzer
#            level: 50%
#        - delay: 100ms
#        - output.turn_off: buzzer
#        - delay: 100ms
#        - output.esp8266_pwm.set_frequency:
#            id: buzzer
#            frequency: 660
#        - output.set_level:
#            id: buzzer
#            level: 50%
#        - delay: 100ms
#        - output.turn_off: buzzer
#        - delay: 300ms
#        - output.esp8266_pwm.set_frequency:
#            id: buzzer
#            frequency: 770
#        - output.set_level:
#            id: buzzer
#            level: 50%
#        - delay: 100ms
#        - output.turn_off: buzzer
#        - delay: 550ms
#        - output.esp8266_pwm.set_frequency:
#            id: buzzer
#            frequency: 380
#        - output.set_level:
#            id: buzzer
#            level: 50%
#        - delay: 100ms
#        - output.turn_off: buzzer
switch:
  - platform: restart
    name: ${friendly_name} (${room}) Restart
